AWSTemplateFormatVersion: 2010-09-09
Description: User serverless microservice
Transform:
    - AWS::Serverless-2016-10-31

Parameters:
    SuperAdminEmail:
        Type: String
        Description: The email address of the default user to be added to the Cognito user pool by default
    CognitoUserPoolArn:
        Type: String
        Description: Imported Cognito User Pool Arn to use in the template

Globals:
    Function:
        Layers:
            - !Ref RuntimeDependenciesLayer
        Environment:
            Variables:
                SUPER_ADMIN_EMAIL: !Ref SuperAdminEmail
        Runtime: nodejs14.x
        MemorySize: 128
        Timeout: 100
    Api:
        Auth:
            Authorizers:
                MsIdCognitoAuthorizer:
                    UserPoolArn: !Ref CognitoUserPoolArn
                    AuthType: COGNITO_USER_POOLS
            DefaultAuthorizer: MsIdCognitoAuthorizer
        Cors:
            AllowMethods: "'GET,OPTIONS'"
            AllowHeaders: "'content-type'"
            AllowOrigin: "'*'"
            AllowCredentials: "'*'"

Resources:
    MsUserInitFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Handler: dist/handlers/init.handler
            Description: User serverless microservice init lambda function
            Runtime: nodejs14.x
            Environment:
                Variables:
                    DYNAMODB_URI: ''
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBUsersTable
                - Statement:
                      - Effect: Allow
                        Resource: '*'
                        Action:
                            - events:PutEvents

    MsUserAPIFunction:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Handler: dist/handlers/user-api.handler
            Description: User serverless microservice
            Runtime: nodejs14.x
            Environment:
                Variables:
                    DYNAMODB_URI: ''
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref DynamoDBUsersTable
                - Statement:
                      - Effect: Allow
                        Resource: '*'
                        Action:
                            - events:PutEvents
            Events:
                Healthcheck:
                    Type: Api
                    Properties:
                        Path: /healthcheck
                        Auth:
                            Authorizer: NONE
                        Method: get
                # Users endpoints
                UsersV0Get:
                    Type: Api
                    Properties:
                        Path: /v0/users
                        Method: get
                UsersV0Post:
                    Type: Api
                    Properties:
                        Path: /v0/users
                        Method: post
                UsersV0Delete:
                    Type: Api
                    Properties:
                        Path: /v0/users/{id}
                        Method: delete
                UsersV0GetOne:
                    Type: Api
                    Properties:
                        Path: /v0/users/{id}
                        Method: get

    # Shared layer with Lambda runtime dependencies
    RuntimeDependenciesLayer:
        Type: AWS::Serverless::LayerVersion
        Metadata:
            BuildMethod: makefile
        Properties:
            LayerName: 'ms-user-dependencies'
            Description: Runtime dependencies for Lambdas
            ContentUri: ./
            CompatibleRuntimes:
                - nodejs14.x
            RetentionPolicy: Retain

    DynamoDBUsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            TableName: ms-user
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH

    # MsUserEventsArchive:
    #     Type: AWS::Events::Archive
    #     Properties:
    #         ArchiveName: 'ms-user-all'
    #         Description: 'User microservice events archive for all events'
    #         EventPattern:
    #             source:
    #                 - 'user-service'
    #         SourceArn: !Sub arn:aws:events:${AWS:Region}:${AWS::AccountId}:event-bus/default
